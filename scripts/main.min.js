!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s="../#RuCombo/#DevSource/scripts/main.js")}({"../#RuCombo/#DevSource/scripts/main.js":
/*!**********************************************!*\
  !*** ../#RuCombo/#DevSource/scripts/main.js ***!
  \**********************************************/
/*! no static exports found */function(module,exports){eval("document.addEventListener('DOMContentLoaded', function () {\n  VanillaTilt.init(document.querySelectorAll(\"*[data-tilt]\"), {\n    // reverse: true, // reverse the tilt direction\n    max: 10,\n    // max tilt rotation (degrees)\n    perspective: 1000,\n    // Transform perspective, the lower the more extreme the tilt gets.\n    scale: 1,\n    // 2 = 200%, 1.5 = 150%, etc..\n    speed: 300,\n    // Speed of the enter/exit transition\n    transition: true,\n    // Set a transition on enter/exit.\n    axis: null,\n    // What axis should be disabled. Can be X or Y.\n    easing: \"cubic-bezier(.03,.98,.52,.99)\",\n    // Easing on enter/exit.\n    gyroscope: true,\n    // Boolean to enable/disable device orientation detection,\n    gyroscopeMinAngleX: -45,\n    // This is the bottom limit of the device angle on X axis, meaning that a device rotated at this angle would tilt the element as if the mouse was on the left border of the element;\n    gyroscopeMaxAngleX: 45,\n    // This is the top limit of the device angle on X axis, meaning that a device rotated at this angle would tilt the element as if the mouse was on the right border of the element;\n    gyroscopeMinAngleY: -45,\n    // This is the bottom limit of the device angle on Y axis, meaning that a device rotated at this angle would tilt the element as if the mouse was on the top border of the element;\n    gyroscopeMaxAngleY: 45\n  });\n  AOS.init();\n  ['.counter-success-task', '.counter-executors'].forEach(function (selector) {\n    if (document.querySelector(selector)) {\n      new PureCounter({\n        selector: selector,\n        start: 0,\n        end: document.querySelector(selector).dataset.countEnd,\n        duration: 2,\n        delay: 10,\n        once: true,\n        pulse: false,\n        decimals: 0,\n        legacy: true,\n        filesizing: false,\n        currency: false,\n        formater: \"ru-RU\",\n        separator: false\n      });\n    }\n  });\n});\n\n//# sourceURL=webpack:///../#RuCombo/#DevSource/scripts/main.js?")}});